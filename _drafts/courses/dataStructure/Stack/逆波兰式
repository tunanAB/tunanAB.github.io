#define _CRT_SECURE_NO_WARNINGS
/************************************************************************************
逆波兰式(耿3.8)
Description
假设表达式由单字母变量和双目四则运算算符构成。试编写程序，将一个通常书写形式且书写正确的表达式转换为逆波兰式。
Input
输入由单字母变量和双目四则运算算符构成的表达式。
Output
输出其逆波兰式。
Sample Input
(a+b)*c
Sample Output
ab+c*
***************************************************************************************/
#include<stdio.h>
#include<string.h>

#define MAXSIZE 100

int i, j, k;

typedef struct stack//栈的结构体类型
{
	char arr[MAXSIZE];
	int top;
}Stack;

void InitStack(Stack* s)//对栈进行初始化：及把栈的 顶“指针” 指向 -1，及代表该栈为空
{
	s->top = -1;
}

int Push(Stack* s, char x)//压栈操作：把数据x压入栈中，顶指针加一。
{
	if (s->top == MAXSIZE - 1)
	{
		return 0;
	}
	s->top++;
	s->arr[s->top] = x;//pop中的传递的参数x不能是地址，这样的话可以直接传常量！！！！
	return 1;
}

int Pop(Stack* s, char* x)//注意这里并没有返回x，而是增加了一个参数，更改了该参数，而返回值还是代表是否成功。
{
	if (s->top == -1)
	{
		return 0;
	}
	*x = s->arr[s->top];
	s->top--;
	return 1;
}

void nibolan(char* p)
{
	Stack s1, s2;
	char x;
	InitStack(&s1);
	InitStack(&s2);
	Push(&s1, '#');
	int len = strlen(p);
	for (i = 0; i < len; i++)
	{
		switch (p[i])
		{
		case'(':
			Push(&s1, p[i]); 
			break;
		case')':
			for (;s1.arr[s1.top]!='(';)
			{
				Pop(&s1, &x);
				Push(&s2, x);
			}
			Pop(&s1, &x);
			break;
		case'+':
		case'-':
			for (; s1.arr[s1.top] != '(' && s1.top != 0;)
			{
				Pop(&s1, &x);
				Push(&s2, x);
			}
			Push(&s1, p[i]);
			break;
		case'*':
		case'/':
			for (; s1.arr[s1.top] != '(' && s1.arr[s1.top] != '+' && s1.arr[s1.top] != '-' && s1.top != 0;)
			{
				Pop(&s1, &x);
				Push(&s2, x);
			}
			Push(&s1, p[i]);
			break;
		default:
			Push(&s2, p[i]);
		}
	}
	for (; s1.top != 0;)
	{
		Pop(&s1, &x);
		Push(&s2, x);
	}
	for (i = 0; i <= s2.top; i++)
	{
		p[i] = s2.arr[i];
	}
	p[i] = 0;
}

int main()
{
	char arr[MAXSIZE];
	scanf("%s", arr);//这里不能用fgets，会把\n也输入
	nibolan(arr);
	puts(arr);
	return 0;
}