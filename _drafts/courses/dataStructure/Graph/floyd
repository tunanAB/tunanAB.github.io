#define _CRT_SECURE_NO_WARNINGS 1
/************************************************************************************
实验4.3∶用弗洛伊德算法求赋权图的两点间的最短路径的长度。

Description
用弗洛伊德算法求任意两点间的最短路径的长度
Input
先输入一个小于100的正整数n，然后输入图的邻接矩阵（10000表示无穷大，即两点之间没有边)，
之后再输入一个小于100的正整数m，最后的m行每行输入两个不同的0到n - 1之间的整数表示两个点。
Output
用弗洛伊德算法求任意两点间的最短路径的长度，并输出这些两个点之间的最短路径的长度。

Simple
Input

7
0 12 10000 10000 10000 16 14
12 0 10 10000 10000 7 10000
10000 10 0 3 5 6 10000
10000 10000 3 0 4 10000 10000
10000 10000 5 4 0 2 8
16 7 6 10000 2 0 9
14 10000 10000 10000 8 9 0

Output

0 12 22 22 18 16 14
12 0 10 13 9 7 16
22 10 0 3 5 6 13
22 13 3 0 4 6 12
18 9 5 4 0 2 8
16 7 6 6 2 0 9
14 16 13 12 8 9 0

0 1 1 5 5 5 6
0 1 2 2 5 5 5
1 1 2 3 4 5 4
5 2 2 3 4 4 4
5 5 2 3 4 5 6
0 1 2 4 4 5 6
0 5 4 4 4 5 6
***************************************************************************************/
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int i, j, k;

typedef struct AdjMatrix
{
	int* spot;//用一维数组表示二维数组
	const int MAX = 10000;//邻接表中用MAX表示两个节点之间没有边连接。
}AdjMatrix;

void CreatMatrix(AdjMatrix* A, int n)
{
	(*A).spot = (int*)malloc(sizeof(int) * n * n);
	if ((*A).spot == NULL)exit(1);
	memset((*A).spot, 0, sizeof(int) * n * n);
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			scanf("%d", &(*A).spot[i * n + j]);
		}
	}
}

int D[10][10];//保存两点之间的最短距离。distence
int P[10][10];//保存两点之间最短距离经过的路径。path

void floyd(AdjMatrix* G, int n)
{
	//初始化P矩阵
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			P[i][j] = j;
		}
	}
	//这里是弗洛伊德算法的核心部分 
	for (k = 0; k < n; k++)
		//外层循环就是不断加入新的中间节点，
		//k为中间点 
	{
		for (i = 0; i < n; i++)
			//i为起点 
		{
			for (j = 0; j < n; j++)
				//j为终点 
			{
				if (D[i][j] > (D[i][k] + D[k][j]))
				{
					D[i][j] = D[i][k] + D[k][j];//更新最小路径 
					P[i][j] = k;//更新最小路径中间顶点
					//这个语句有不同观点，有的人说是P[i][j]=P[i][k]!!!!!!
				}
			}
		}
	}
}

int main()
{
	AdjMatrix A;
	int n;
	scanf("%d", &n);

	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			scanf("%d", &D[i][j]);
		}
	}
	floyd(&A, n);


	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			printf("%d ", D[i][j]);
		}
		printf("\n");
	}
	printf("\n"); printf("\n"); printf("\n");
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			printf("%d ", P[i][j]);
		}
		printf("\n");
	}

	return 0;
}