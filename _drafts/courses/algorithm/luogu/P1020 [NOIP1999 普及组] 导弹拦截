/**
    题目描述
    某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。
    输入导弹依次飞来的高度，计算这套系统最多能拦截多少导弹，如果要拦截所有导弹最少要配备多少套这种导弹拦截系统。

    输入格式
    一行，若干个整数，中间由空格隔开。

    输出格式
    两行，每行一个整数，第一个数字表示这套系统最多能拦截多少导弹，第二个数字表示如果要拦截所有导弹最少要配备多少套这种导弹拦截系统。

    输入输出样例
    输入 #1复制
    389 207 155 300 299 170 158 65
    输出 #1复制
    6
    2
*/
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>

#define MAX 100
#define INF 2147483647
int H[MAX], F[MAX];
//F[n]储存着长度为n的单调不增数列的最后一位的最大值

int main() {
	int n = 1;
	int t = 0;
	char temp = 0;
	scanf("%d", &H[n]);
	while (getchar() != '\n') {
		n++;
		scanf("%d", &H[n]);
	};
	F[0] = INF;
	for (int i = 1; i <= n; i++)
	{
		int l = 0, r = t + 1;
		//为了找尽可能大的链且最后一项要大于H[i]
		//通过二分法逼近答案
		while (r - l > 1) {
			int m = l + (r - l) / 2;
			if (F[m] >= H[i])
				l = m;
			else
				r = m;
		}
		
		int x = l + 1;//dp[i]
		if (x > t)
			t = x;
		F[x] = H[i];
	}
	printf("%d\n", t);

	t = 0;
	for (int i = 1; i <= n; i++)
	{
		int l = 0, r = t + 1;
		//为了找尽可能大的链且最后一项要大于H[i]
		//通过二分法逼近答案
		while (r - l > 1) {
			int m = l + (r - l) / 2;
			if (F[m] < H[i])
				l = m;
			else
				r = m;
		}

		int x = l + 1;//dp[i]
		if (x > t)
			t = x;
		F[x] = H[i];
	}
	printf("%d\n", t);
}