<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://wsttask.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wsttask.github.io/" rel="alternate" type="text/html" /><updated>2024-03-27T16:03:10+08:00</updated><id>https://wsttask.github.io/feed.xml</id><entry><title type="html">字符串类型</title><link href="https://wsttask.github.io/2024/03/27/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B.html" rel="alternate" type="text/html" title="字符串类型" /><published>2024-03-27T15:37:41+08:00</published><updated>2024-03-27T15:37:41+08:00</updated><id>https://wsttask.github.io/2024/03/27/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B</id><content type="html" xml:base="https://wsttask.github.io/2024/03/27/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B.html"><![CDATA[<h3 id="1--字符串类型">1  字符串类型</h3>

<h4 id="1字符串定义">（1）字符串定义</h4>

<ul>
  <li><strong>字符串</strong>：由0个或多个字符组成的有序字符序列，由一对单引号(‘ ‘)或一对双引号(“ “)表示，可对字符进行索引，用序号进行访问。</li>
  <li><strong>表示方法</strong>：由一对单引号或双引号表示，仅表示单行字符串；由一对三单引号或三双引号表示，可表示多行字符串。</li>
</ul>

<h4 id="2字符串的索引">（2）字符串的索引</h4>

<ul>
  <li>字符串的每个字符都是一个字符串类型</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">str</span> <span class="o">=</span> <span class="sh">'</span><span class="s">abcdefghijklmnop</span><span class="sh">'</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="nb">str</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="c1"># 编号是从0开始的
</span>
<span class="nf">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="c1"># -1是字符串的最后一个，len(str)-1也是最后一个
</span>
<span class="nf">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="o">-</span><span class="nf">len</span><span class="p">(</span><span class="nb">str</span><span class="p">)])</span> <span class="c1"># 0是第一个，-len(str)也是第一个
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C</span><span class="p">:</span>\<span class="n">Users</span>\<span class="n">zhao</span><span class="o">-</span>\<span class="n">AppData</span>\<span class="n">Local</span>\<span class="n">Programs</span>\<span class="n">Python</span>\<span class="n">Python310</span>\<span class="n">python</span><span class="p">.</span><span class="n">exe</span> <span class="n">C</span><span class="p">:</span>\<span class="n">Users</span>\<span class="n">zhao</span><span class="o">-</span>\<span class="n">Desktop</span>\<span class="n">hyDM</span>\<span class="n">test</span><span class="p">.</span><span class="n">py</span> 
<span class="mi">16</span>
<span class="n">b</span>
<span class="n">p</span>
<span class="n">p</span>
<span class="n">a</span>
<span class="n">a</span>

<span class="n">Process</span> <span class="n">finished</span> <span class="k">with</span> <span class="nb">exit</span> <span class="n">code</span> <span class="mi">0</span>
</code></pre></div></div>

<h4 id="3字符串的使用">（3）字符串的使用</h4>

<ul>
  <li>使用[ ] 获取字符串中一个或多个字符。</li>
  <li>
    <p><strong>字符串索引</strong>：s[N] 通过序号获取单个字符。</p>
  </li>
  <li><strong>字符串切片</strong>：s[M:N] 获取M到N(不含)子串，使用[M: N :K]根据步长对字符串切片，使用[::-1]对字符串进行逆序。其中，M缺失表示至开头，N缺失表示至结尾。</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">str</span> <span class="o">=</span> <span class="sh">'</span><span class="s">abcdefghijklmnop</span><span class="sh">'</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="nb">str</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span> <span class="c1"># 表示取1-3 索引的字符
</span><span class="nf">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span> <span class="c1"># 表示取1-\infty 索引的字符
</span><span class="nf">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[:</span><span class="mi">5</span><span class="p">])</span> <span class="c1"># 表示取0-4索引的字符
</span>
<span class="nf">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">10</span><span class="p">:</span><span class="mi">3</span><span class="p">])</span> <span class="c1"># 从1取到10，每隔3取一个，最后如果没取到不取
</span><span class="nf">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="c1"># 将字符串反向
</span><span class="nf">print</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="mi">10</span><span class="p">::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="c1"># -1代表反向，从10号索引开始反向取
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C</span><span class="p">:</span>\<span class="n">Users</span>\<span class="n">zhao</span><span class="o">-</span>\<span class="n">AppData</span>\<span class="n">Local</span>\<span class="n">Programs</span>\<span class="n">Python</span>\<span class="n">Python310</span>\<span class="n">python</span><span class="p">.</span><span class="n">exe</span> <span class="n">C</span><span class="p">:</span>\<span class="n">Users</span>\<span class="n">zhao</span><span class="o">-</span>\<span class="n">Desktop</span>\<span class="n">hyDM</span>\<span class="n">test</span><span class="p">.</span><span class="n">py</span> 
<span class="mi">16</span>
<span class="n">bcd</span>
<span class="n">bcdefghijklmnop</span>
<span class="n">abcde</span>
<span class="n">beh</span>
<span class="n">kjihgfedcba</span>

<span class="n">Process</span> <span class="n">finished</span> <span class="k">with</span> <span class="nb">exit</span> <span class="n">code</span> <span class="mi">0</span>
</code></pre></div></div>

<h4 id="4字符串处理函数">（4）字符串处理函数</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="c1"># 长度，返回字符串x的长度
</span>
<span class="nf">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="c1"># 任意类型x所对应的字符串形式
</span>
<span class="nf">hex</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="n">或oct</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="c1"># 整数x的十六进制或八进制小写形式字符串
</span>
<span class="nf">chr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="c1"># x为Unicode编码，返回其对应的字符
</span>
<span class="nf">ord</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="c1"># x为字符，返回其对应的Unicode编码
</span></code></pre></div></div>

<h4 id="5字符串处理方法">（5）字符串处理方法</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">str</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span><span class="n">或str</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span>	<span class="n">返回字符串的副本</span><span class="err">，</span><span class="n">全部字符小写</span><span class="o">/</span><span class="n">大写</span>
<span class="nb">str</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">sep</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>	<span class="n">返回一个列表</span><span class="err">，</span><span class="n">由str根据sep被分割的部分组成</span>
<span class="nb">str</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="n">sub</span><span class="p">)</span>	<span class="n">返回子串sub在str中出现的次数</span>
<span class="nb">str</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">old</span><span class="p">,</span><span class="n">new</span><span class="p">)</span>	<span class="n">返回字符串str的副本</span><span class="err">，</span><span class="n">所有old子串被替换为new</span>
<span class="nb">str</span><span class="p">.</span><span class="nf">center</span><span class="p">(</span><span class="n">width</span><span class="p">[,</span><span class="n">fillchar</span><span class="p">])</span>	<span class="n">字符串str根据宽度width居中</span><span class="err">，</span><span class="n">fillchar可选</span>
<span class="nb">str</span><span class="p">.</span><span class="nf">strip</span><span class="p">(</span><span class="n">chars</span><span class="p">)</span>	<span class="n">从str中去掉在其左侧和右侧chars中列出的字符</span>
<span class="nb">str</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nb">iter</span><span class="p">)</span>	<span class="n">在iter变量除最后元素外每个元素后增加一个str</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[1 字符串类型]]></summary></entry><entry><title type="html">Ord</title><link href="https://wsttask.github.io/2024/03/27/ord.html" rel="alternate" type="text/html" title="Ord" /><published>2024-03-27T15:35:48+08:00</published><updated>2024-03-27T15:35:48+08:00</updated><id>https://wsttask.github.io/2024/03/27/ord</id><content type="html" xml:base="https://wsttask.github.io/2024/03/27/ord.html"><![CDATA[<h3 id="ordc"><code class="language-plaintext highlighter-rouge">ord(c)</code></h3>

<p>对表示单个 Unicode 字符的字符串，返回代表它 Unicode 码点的整数。例如 <code class="language-plaintext highlighter-rouge">ord('a')</code> 返回整数 <code class="language-plaintext highlighter-rouge">97</code>， <code class="language-plaintext highlighter-rouge">ord('€')</code> （欧元符号）返回 <code class="language-plaintext highlighter-rouge">8364</code> 。这是 <a href="https://docs.python.org/zh-cn/3/library/functions.html#chr"><code class="language-plaintext highlighter-rouge">chr()</code></a> 的逆函数。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[ord(c)]]></summary></entry><entry><title type="html">Chr</title><link href="https://wsttask.github.io/2024/03/27/chr.html" rel="alternate" type="text/html" title="Chr" /><published>2024-03-27T15:35:04+08:00</published><updated>2024-03-27T15:35:04+08:00</updated><id>https://wsttask.github.io/2024/03/27/chr</id><content type="html" xml:base="https://wsttask.github.io/2024/03/27/chr.html"><![CDATA[<h3 id="chri"><code class="language-plaintext highlighter-rouge">chr(i)</code></h3>

<p>返回 Unicode 码位为整数 <em>i</em> 的字符的字符串格式。例如，<code class="language-plaintext highlighter-rouge">chr(97)</code> 返回字符串 <code class="language-plaintext highlighter-rouge">'a'</code>，<code class="language-plaintext highlighter-rouge">chr(8364)</code> 返回字符串 <code class="language-plaintext highlighter-rouge">'€'</code>。这是 <a href="https://docs.python.org/zh-cn/3/library/functions.html#ord"><code class="language-plaintext highlighter-rouge">ord()</code></a> 的逆函数。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[chr(i)]]></summary></entry><entry><title type="html">Hex</title><link href="https://wsttask.github.io/2024/03/27/hex.html" rel="alternate" type="text/html" title="Hex" /><published>2024-03-27T15:31:38+08:00</published><updated>2024-03-27T15:31:38+08:00</updated><id>https://wsttask.github.io/2024/03/27/hex</id><content type="html" xml:base="https://wsttask.github.io/2024/03/27/hex.html"><![CDATA[<h3 id="hexx">hex(x)</h3>

<p>将<strong>整数</strong>转换为带前缀 “0x” 前缀的<strong>小写十六进制数字符串</strong>。 如果 <em>x</em> 不是一个 Python <code class="language-plaintext highlighter-rouge">int</code>对象，则它必须定义返回一个整数的 <code class="language-plaintext highlighter-rouge">__index__()</code>方法。 下面是一些例子:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">hex</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span>
<span class="sh">'</span><span class="s">0xff</span><span class="sh">'</span>
<span class="nf">hex</span><span class="p">(</span><span class="o">-</span><span class="mi">42</span><span class="p">)</span>
<span class="sh">'</span><span class="s">-0x2a</span><span class="sh">'</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[hex(x)]]></summary></entry><entry><title type="html">Type</title><link href="https://wsttask.github.io/2024/03/27/type.html" rel="alternate" type="text/html" title="Type" /><published>2024-03-27T15:26:08+08:00</published><updated>2024-03-27T15:26:08+08:00</updated><id>https://wsttask.github.io/2024/03/27/type</id><content type="html" xml:base="https://wsttask.github.io/2024/03/27/type.html"><![CDATA[<p><em>class</em> <strong>type</strong>(<em>name</em>, <em>bases</em>, <em>dict</em>, <em>**kwds</em>)</p>

<p>传入一个参数时，返回 <em>object</em> 的类型。 返回值是一个 type 对象，通常与 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#instance.__class__"><code class="language-plaintext highlighter-rouge">object.__class__</code></a> 所返回的对象相同。</p>

<blockquote>
  <p>注意type这个内置函数返回的是type对象，而非字符串</p>
</blockquote>

<p>在 Python 中，<code class="language-plaintext highlighter-rouge">type()</code> 函数返回对象的类型对象，而不是对象本身的 <code class="language-plaintext highlighter-rouge">__class__</code> 属性。因此，<code class="language-plaintext highlighter-rouge">type(str)</code> 返回的是表示字符串类型的 <code class="language-plaintext highlighter-rouge">type</code> 对象，而不是字符串对象本身的类型。</p>

<p>可以输出<code class="language-plaintext highlighter-rouge">obj.__class__</code>，结果是一样的</p>]]></content><author><name></name></author><summary type="html"><![CDATA[class type(name, bases, dict, **kwds)]]></summary></entry><entry><title type="html">Print</title><link href="https://wsttask.github.io/2024/03/27/print.html" rel="alternate" type="text/html" title="Print" /><published>2024-03-27T15:14:02+08:00</published><updated>2024-03-27T15:14:02+08:00</updated><id>https://wsttask.github.io/2024/03/27/print</id><content type="html" xml:base="https://wsttask.github.io/2024/03/27/print.html"><![CDATA[<h1 id="print">print</h1>

<p>函数原型：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>

<span class="nf">print</span><span class="p">(</span><span class="o">*</span><span class="n">objects</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">objects</span> <span class="o">--</span> <span class="n">复数</span><span class="err">，</span><span class="n">表示可以一次输出多个对象</span><span class="err">。</span><span class="n">输出多个对象时</span><span class="err">，</span><span class="n">需要用</span> <span class="p">,</span> <span class="n">分隔</span><span class="err">。</span>
<span class="n">sep</span> <span class="o">--</span> <span class="n">用来间隔多个对象</span><span class="err">，</span><span class="n">默认值是一个空格</span><span class="err">。</span>
<span class="n">end</span> <span class="o">--</span> <span class="n">用来设定以什么结尾</span><span class="err">。</span><span class="n">默认值是换行符</span> \<span class="n">n</span><span class="err">，</span><span class="n">我们可以换成其他字符串</span><span class="err">。</span>
<span class="nb">file</span> <span class="o">--</span> <span class="n">要写入的文件对象</span><span class="err">。</span>
<span class="n">flush</span> <span class="o">--</span> <span class="n">输出是否被缓存通常决定于</span> <span class="nb">file</span><span class="err">，</span><span class="n">但如果</span> <span class="n">flush</span> <span class="n">关键字参数为</span> <span class="bp">True</span><span class="err">，</span><span class="n">流会被强制刷新</span><span class="err">。</span>
<span class="n">正常情况下print到test</span><span class="p">.</span><span class="n">txt中的内容先从到内存中</span><span class="err">，</span><span class="n">当文件对象关闭时才把内容输出到</span>
<span class="n">test</span><span class="p">.</span><span class="n">txt</span> <span class="n">中</span><span class="err">，</span><span class="n">当flush</span><span class="o">=</span><span class="n">True时它会立即把内容刷新存到</span> <span class="n">test</span><span class="p">.</span><span class="n">txt</span> <span class="n">中</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">www</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">runoob</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">com</span><span class="sh">"</span><span class="p">,</span><span class="n">sep</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>

<span class="o">&gt;</span>
<span class="n">www</span><span class="p">.</span><span class="n">runoob</span><span class="p">.</span><span class="n">com</span>

<span class="n">Process</span> <span class="n">finished</span> <span class="k">with</span> <span class="nb">exit</span> <span class="n">code</span> <span class="mi">0</span>

<span class="c1"># 注意这里的 sep/sequence 是指的是不同的对象之间用.隔开
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="sh">'</span><span class="s">abc</span><span class="sh">'</span><span class="p">;</span><span class="n">b</span> <span class="o">=</span> <span class="sh">'</span><span class="s">bcd</span><span class="sh">'</span><span class="p">;</span><span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span><span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span>

<span class="o">&gt;</span>
<span class="n">abc</span> <span class="n">bcd</span>
<span class="n">abcbcd</span>

<span class="n">Process</span> <span class="n">finished</span> <span class="k">with</span> <span class="nb">exit</span> <span class="n">code</span> <span class="mi">0</span>

<span class="c1"># 注意在print函数中可以用+号将多个对象连接起来
</span></code></pre></div></div>

<h3 id="python-中的--号">python 中的 + 号</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">1.</span><span class="n">对于int类型</span><span class="err">，“</span><span class="o">+</span><span class="err">”</span><span class="n">表示两个数相加</span>
<span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span>
<span class="n">结果是5</span>


<span class="mf">2.</span><span class="n">对于str类型</span><span class="err">，“</span><span class="o">+</span><span class="err">”</span><span class="n">表示字符串的连接</span>

<span class="sh">'</span><span class="s">ab</span><span class="sh">'</span> <span class="o">+</span> <span class="sh">'</span><span class="s">cd</span><span class="sh">'</span>
<span class="n">结果是</span><span class="sh">'</span><span class="s">abcd</span><span class="sh">'</span>


<span class="mf">3.</span><span class="n">两个list相加</span><span class="err">，</span><span class="n">表示两个list相连</span>

<span class="n">python_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">python_list</span> <span class="o">+</span> <span class="n">python_list</span>
<span class="n">结果是</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>


<span class="mf">4.</span><span class="n">对于python中的numpy</span><span class="err">，“</span><span class="o">+</span><span class="err">”</span><span class="n">表示值相加</span>

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">numpy_array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="n">numpy_array</span> <span class="o">+</span> <span class="n">numpy_array</span> 
<span class="n">结果是</span> <span class="nf">array</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>


<span class="n">总之</span><span class="err">，</span><span class="n">在python中</span><span class="err">，</span><span class="n">对于</span><span class="err">“</span><span class="o">+</span><span class="err">”，</span><span class="n">不同的类型</span><span class="o">=</span><span class="n">不同的行为</span>
</code></pre></div></div>

<h3 id="print输出对象">print输出对象</h3>

<p>在 Python 中，<code class="language-plaintext highlighter-rouge">print()</code> 函数在输出对象时，实际上会调用该对象的 <code class="language-plaintext highlighter-rouge">__str__()</code> 方法。当你调用 <code class="language-plaintext highlighter-rouge">print(type(str))</code> 时，它会首先获取 <code class="language-plaintext highlighter-rouge">type(str)</code> 的返回值，即类型对象，然后调用该类型对象的 <code class="language-plaintext highlighter-rouge">__str__()</code> 方法，将其返回的字符串作为输出打印出来。</p>

<p><code class="language-plaintext highlighter-rouge">type</code> 对象的 <code class="language-plaintext highlighter-rouge">__str__()</code> 方法会返回该类型对象的名称，因此在这种情况下，<code class="language-plaintext highlighter-rouge">print(type(str))</code> 将输出 <code class="language-plaintext highlighter-rouge">&lt;class 'str'&gt;</code>，表示该对象是 <code class="language-plaintext highlighter-rouge">str</code> 类型的类型对象。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[print]]></summary></entry><entry><title type="html">注释</title><link href="https://wsttask.github.io/2024/03/26/%E6%B3%A8%E9%87%8A.html" rel="alternate" type="text/html" title="注释" /><published>2024-03-26T21:18:36+08:00</published><updated>2024-03-26T21:18:36+08:00</updated><id>https://wsttask.github.io/2024/03/26/%E6%B3%A8%E9%87%8A</id><content type="html" xml:base="https://wsttask.github.io/2024/03/26/%E6%B3%A8%E9%87%8A.html"><![CDATA[<p>注释可以单独作为一行， 比如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># info 变量 记录 作者的信息，包括 名字，身高，体重
</span><span class="n">info</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span> <span class="p">:</span><span class="sh">'</span><span class="s">黑羽白月</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">180cm</span><span class="sh">'</span><span class="p">}</span>
</code></pre></div></div>

<p>也可以接在代码的后面，比如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>  <span class="c1"># 打印身高到屏幕上
</span></code></pre></div></div>

<p>也可以连续有多行的注释，比如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># info 变量 记录 作者的信息
# 包括 名字，身高，体重
</span><span class="n">info</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span> <span class="p">:</span><span class="sh">'</span><span class="s">黑羽白月</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">180cm</span><span class="sh">'</span><span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[注释可以单独作为一行， 比如：]]></summary></entry><entry><title type="html">复数类型</title><link href="https://wsttask.github.io/2024/03/26/%E5%A4%8D%E6%95%B0%E7%B1%BB%E5%9E%8B.html" rel="alternate" type="text/html" title="复数类型" /><published>2024-03-26T21:13:31+08:00</published><updated>2024-03-26T21:13:31+08:00</updated><id>https://wsttask.github.io/2024/03/26/%E5%A4%8D%E6%95%B0%E7%B1%BB%E5%9E%8B</id><content type="html" xml:base="https://wsttask.github.io/2024/03/26/%E5%A4%8D%E6%95%B0%E7%B1%BB%E5%9E%8B.html"><![CDATA[<h3 id="3-复数类型complex详解">3. 复数类型（complex）详解</h3>

<ul>
  <li><strong>复数（Complex）</strong> 是 <a href="http://c.biancheng.net/">Python</a> 的内置类型，直接书写即可。换句话说，Python 语言本身就支持复数，而不依赖于标准库或者第三方库。</li>
  <li><strong>复数由实部<code class="language-plaintext highlighter-rouge">（real）</code>和虚部<code class="language-plaintext highlighter-rouge">（imag）</code>构成，在 Python 中，复数的虚部以j或者J作为后缀</strong>，具体格式为：</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">+</span> <span class="n">bj</span>
</code></pre></div></div>

<p>a 表示实部，b 表示虚部。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">+</span> <span class="mf">2j</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C</span><span class="p">:</span>\<span class="n">Users</span>\<span class="n">zhao</span><span class="o">-</span>\<span class="n">AppData</span>\<span class="n">Local</span>\<span class="n">Programs</span>\<span class="n">Python</span>\<span class="n">Python310</span>\<span class="n">python</span><span class="p">.</span><span class="n">exe</span> <span class="n">C</span><span class="p">:</span>\<span class="n">Users</span>\<span class="n">zhao</span><span class="o">-</span>\<span class="n">Desktop</span>\<span class="n">hyDM</span>\<span class="n">test</span><span class="p">.</span><span class="n">py</span> 
<span class="p">(</span><span class="mi">10</span><span class="o">+</span><span class="mf">2j</span><span class="p">)</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">complex</span><span class="sh">'</span><span class="s">&gt;
</span></code></pre></div></div>

<p><strong>可以发现，复数在 Python 内部的类型是 complex，<code class="language-plaintext highlighter-rouge">Python 默认支持对复数的简单计算</code>。</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[3. 复数类型（complex）详解]]></summary></entry><entry><title type="html">浮点数类型</title><link href="https://wsttask.github.io/2024/03/26/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B1%BB%E5%9E%8B.html" rel="alternate" type="text/html" title="浮点数类型" /><published>2024-03-26T21:10:26+08:00</published><updated>2024-03-26T21:10:26+08:00</updated><id>https://wsttask.github.io/2024/03/26/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B1%BB%E5%9E%8B</id><content type="html" xml:base="https://wsttask.github.io/2024/03/26/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B1%BB%E5%9E%8B.html"><![CDATA[<h3 id="2-python小数浮点数float详解">2. Python小数/浮点数（float）详解</h3>

<ul>
  <li>在编程语言中，小数通常以浮点数的形式存储。浮点数和定点数是相对的：小数在存储过程中如果小数点发生移动，就称为浮点数；如果小数点不动，就称为定点数。</li>
  <li><a href="http://c.biancheng.net/">Python</a> 中的小数有两种书写形式：</li>
</ul>

<p><strong>1. 十进制形式</strong></p>

<ul>
  <li>这种就是我们平时看到的小数形式，例如 34.6、346.0、0.346。</li>
  <li>书写小数时必须包含一个小数点，否则会被 Python 当作整数处理。</li>
</ul>

<p><strong>2. 指数形式</strong></p>

<p>Python 小数的指数形式的写法为：</p>

<blockquote>
  <p>aEn 或 aen</p>
</blockquote>

<ul>
  <li>a 为尾数部分，是一个十进制数；n 为指数部分，是一个十进制整数；E或e是固定的字符，用于分割尾数部分和指数部分。整个表达式等价于 a×10n。</li>
</ul>

<p><strong>例子</strong></p>

<ul>
  <li>2.1E5 = 2.1×105，其中 2.1 是尾数，5 是指数。</li>
  <li>3.7E-2 = 3.7×10-2，其中 3.7 是尾数，-2 是指数。</li>
  <li>0.5E7 = 0.5×107，其中 0.5 是尾数，7 是指数。</li>
</ul>

<blockquote>
  <p><strong>注意，只要写成指数形式就是小数，即使它的最终值看起来像一个整数。例如 14E3 等价于 14000，但 14E3 是一个小数。</strong></p>
</blockquote>

<ul>
  <li>&lt;font color=#900&gt;<code class="language-plaintext highlighter-rouge">Python 只有一种小数类型，就是 float</code>&lt;/font&gt;。<strong>C语言有两种小数类型，分别是 float 和 double：float
能容纳的小数范围比较小，double 能容纳的小数范围比较大。</strong></li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[2. Python小数/浮点数（float）详解]]></summary></entry><entry><title type="html">集合类型</title><link href="https://wsttask.github.io/2024/03/26/%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B.html" rel="alternate" type="text/html" title="集合类型" /><published>2024-03-26T21:03:58+08:00</published><updated>2024-03-26T21:03:58+08:00</updated><id>https://wsttask.github.io/2024/03/26/%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B</id><content type="html" xml:base="https://wsttask.github.io/2024/03/26/%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B.html"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry></feed>